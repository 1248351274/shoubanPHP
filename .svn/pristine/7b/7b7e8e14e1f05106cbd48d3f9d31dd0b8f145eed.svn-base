<?php
namespace app\wshop\controller;
use think\Controller;
use think\Session;
use think\Db;
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept,Authorization,loginID");
class User extends UserBase
{
    public function getUserMsg()
    {
        $id = $this->login_id;
        $msg = Db::table('user')
                    ->join('shop','User_Id=U_Id','left')
                    ->where('User_Id',$id)
                    ->find();
        if($msg){
            return json_encode(array('result'=>1,'info'=>$msg));
        }else{
            return json_encode(array('result'=>0,'info'=>'用户信息获取失败'));
        }
    }
    public function editMsg(){
        $id = $this->login_id;
        $rs = Db::table('user')->where('User_Id',$id)->update($_POST);
        $rss = Db::table('user')->where('User_Id',$id)->where($_POST)->select();
        if($rss){
            return json_encode(array('result'=>1,'info'=>'修改成功'));
        }else{
            return json_encode(array('result'=>0,'info'=>'修改失败'));
        }
    }
    public function recharge(){
        $id = $this->login_id;
        $rs = Db::table('user')->where('User_Id',$id)->setInc('User_Balance',$_POST['price']);
        if($rs){
            return json_encode(array('result'=>1,'info'=>'充值成功'));
        }else{
            return json_encode(array('result'=>0,'info'=>'充值失败'));
        }
    }
    public function recorder(){
        $id = $this->login_id;
        $msg = Db::table('order')->where('U_Id',$id)->select();
        foreach($msg as $key => $value){
            $g = Db::table('goods')->where('Goods_Id',$value['G_Id'])->find();
            $msg[$key]['Order_Time'] = date('Y-m-d',$value['Order_Time']);
            $msg[$key]['Remark'] = $g['Goods_Remarks'];
            $msg[$key]['Img'] = Db::table('image')->where('G_Id',$value['G_Id'])->value('Image_Location');
            $msg[$key]['Shop'] = Db::table('shop')->where('Shop_Id',$value['Shop_Id'])->value('Shop_Name');
        }
        if($msg){
            return json_encode(array('result'=>1,'info'=>$msg));
        }else{
            return json_encode(array('result'=>0));
        }
    }
    public function upimg(){
        header('Content-type:text/html;charset=utf-8');
        $base64_image_content = $_POST['uploadedfile'];
        //匹配出图片的格式
        if (preg_match('/^(data:\s*image\/(\w+);base64,)/', $base64_image_content, $result)){
            $type = $result[2];
            $new_file = "public/images/user/".date('Ymd',time())."/";
            if(!file_exists($new_file))
            {
                //检查是否有该文件夹，如果没有就创建，并给予最高权限
                mkdir($new_file, 0777,true);
            }
            $new_file = $new_file.time().".{$type}";
            if (file_put_contents($new_file, base64_decode(str_replace($result[1], '', $base64_image_content)))){
                $aa = Db::table('user')->where('User_Id',$this->login_id)->value('User_Image');
                if($aa!='/wxshop/public/images/user/tx.jpg'){
                    unlink(substr($aa,8));
                }
                $img['User_Image'] = '/wxshop/'.$new_file;
                Db::table('user')->where('User_Id',$this->login_id)->update($img);
                
                return json_encode(array('result'=>'1','info'=>$img['User_Image']));
            }else{
                return json_encode(array('result'=>'0','info'=>'上传失败'));
            }
        }else{
            return json_encode(array('result'=>'0','info'=>'上传失败'));
        }
    }
}
